generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Auth.js models

model users {
  id                   Int                    @id @default(autoincrement())
  name                 String?                @db.VarChar(255)
  email                String                 @db.VarChar(255)
  emailVerified        DateTime?              @db.Timestamptz(6)
  image                String?
  attendances          attendance[]
  user_roles           user_roles[]
  enrollments          enrollment[]
  user_grades          user_grades[]
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now()) @updatedAt
  academic_performance academic_performance[]
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

// RBAC models

model role {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  user_roles       user_roles[]
  role_permissions role_permissions[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
}

model user_roles {
  user        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int
  role        role     @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id     Int
  assigned_at DateTime @default(now())

  @@id([user_id, role_id])
}

model permission {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  role_permissions role_permissions[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
}

model role_permissions {
  role          role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id       Int
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  permission_id Int
  assigned_at   DateTime   @default(now())

  @@id([role_id, permission_id])
}

// Database models:

model database_metric {
  id         Int      @id @default(autoincrement())
  query_time Int
  row_count  Int
  timestamp  DateTime
}

// App models:

model academic_year {
  id         Int      @id @default(autoincrement())
  name       String
  start_date DateTime
  end_date   DateTime
  type       String
  courses    course[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([name, type])
  @@unique([start_date, end_date, type])
}

model course {
  id                   Int                    @id @default(autoincrement())
  subject              subject                @relation(fields: [subject_id], references: [id])
  subject_id           Int
  teacher              teacher                @relation(fields: [teacher_id], references: [id])
  teacher_id           Int
  grade                grade                  @relation(fields: [grade_id], references: [id])
  grade_id             Int
  academic_year        academic_year          @relation(fields: [academic_year_id], references: [id])
  academic_year_id     Int
  schedules            schedule[]
  enrollments          enrollment[]
  created_at           DateTime               @default(now())
  updated_at           DateTime               @default(now()) @updatedAt
  academic_performance academic_performance[]
}

model lecture {
  id          Int          @id @default(autoincrement())
  schedule    schedule     @relation(fields: [schedule_id], references: [id])
  schedule_id Int
  topic       String?
  attendances attendance[]
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now()) @updatedAt
  subject     subject?     @relation(fields: [subjectId], references: [id])
  subjectId   Int?
  teacher     teacher?     @relation(fields: [teacherId], references: [id])
  teacherId   Int?
}

model attendance {
  id         Int      @id @default(autoincrement())
  student    users    @relation(fields: [student_id], references: [id])
  student_id Int
  lecture    lecture  @relation(fields: [lecture_id], references: [id])
  lecture_id Int
  status     String // e.g., "present", "absent", "late"
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([student_id, lecture_id])
}

model schedule {
  id         Int       @id @default(autoincrement())
  course     course    @relation(fields: [course_id], references: [id])
  course_id  Int
  date       DateTime
  start_time DateTime
  end_time   DateTime
  lectures   lecture[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  grade      grade?    @relation(fields: [gradeId], references: [id])
  gradeId    Int?
}

model subject {
  id               Int                @id @default(autoincrement())
  name             String
  teacher_subjects teacher_subjects[] // Keep this as is
  lecture          lecture[]
  courses          course[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
}

model teacher_subjects {
  teacher     teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  teacher_id  Int
  subject     subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  subject_id  Int
  assigned_at DateTime @default(now())
  is_primary  Boolean  @default(false)

  @@id([teacher_id, subject_id])
}

model teacher {
  id               Int                @id @default(autoincrement())
  name             String
  email            String?
  teacher_subjects teacher_subjects[] // Keep this as is
  lecture          lecture[]
  courses          course[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @default(now()) @updatedAt
}

model grade {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  schedules   schedule[]
  user_grades user_grades[]
  courses     course[]
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now()) @updatedAt
}

model user_grades {
  user      users    @relation(fields: [user_id], references: [id])
  user_id   Int
  grade     grade    @relation(fields: [grade_id], references: [id])
  grade_id  Int
  joined_at DateTime @default(now())

  @@id([user_id, grade_id])
}

model enrollment {
  id         Int      @id @default(autoincrement())
  student    users    @relation(fields: [student_id], references: [id])
  student_id Int
  course     course   @relation(fields: [course_id], references: [id])
  course_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([student_id, course_id])
}

model academic_performance {
  id         Int      @id @default(autoincrement())
  student    users    @relation(fields: [student_id], references: [id])
  student_id Int
  course     course   @relation(fields: [course_id], references: [id])
  course_id  Int
  score      Float
  grade      String // e.g., "A", "B", "C", etc.
  term       String // e.g., "Midterm", "Final", "Q1", etc.
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@unique([student_id, course_id, term])
}
