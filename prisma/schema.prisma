generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Auth.js models 
// can be changed (but don't change name)
model users {
    id            Int          @id @default(autoincrement())
    name          String?      @db.VarChar(255)
    email         String       @unique @db.VarChar(255)
    emailVerified DateTime?    @db.Timestamptz(6)
    image         String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @default(now()) @updatedAt
    userRoles     UserRole[]
    Attendance    Attendance[]
}

// don't change (auth system)
model verification_token {
    identifier String
    expires    DateTime @db.Timestamptz(6)
    token      String

    @@id([identifier, token])
}

// don't change (auth system)
model accounts {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String  @db.VarChar(255)
    provider          String  @db.VarChar(255)
    providerAccountId String  @db.VarChar(255)
    refresh_token     String?
    access_token      String?
    expires_at        BigInt?
    id_token          String?
    scope             String?
    session_state     String?
    token_type        String?
}

// don't change (auth system)
model sessions {
    id           Int      @id @default(autoincrement())
    userId       Int
    expires      DateTime @db.Timestamptz(6)
    sessionToken String   @db.VarChar(255)
}

// RBAC models
model Role {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    description     String?
    userRoles       UserRole[]
    rolePermissions RolePermission[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @default(now()) @updatedAt
}

model UserRole {
    user       users    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId     Int
    assignedAt DateTime @default(now())

    @@id([userId, roleId])
}

model Permission {
    id              Int              @id @default(autoincrement())
    name            String           @unique
    description     String?
    rolePermissions RolePermission[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @default(now()) @updatedAt
}

model RolePermission {
    role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId       Int
    permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
    permissionId Int
    assignedAt   DateTime   @default(now())

    @@id([roleId, permissionId])
}

// Database models
model DatabaseMetric {
    id        Int      @id @default(autoincrement())
    queryTime Int
    rowCount  Int
    timestamp DateTime
}

// App models
model Teacher {
    id          Int       @id @default(autoincrement())
    first_name  String
    second_name String
    email       String    @unique
    subjects    Subject[]
    lessons     Lesson[]
}

model Subject {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    teachers Teacher[]
    lessons  Lesson[]
}

model Lesson {
    id          Int          @id @default(autoincrement())
    start_time  DateTime
    end_time    DateTime
    subject     Subject      @relation(fields: [subjectId], references: [id])
    subjectId   Int
    teacher     Teacher      @relation(fields: [teacherId], references: [id])
    teacherId   Int
    schedule    Schedule     @relation(fields: [scheduleId], references: [id])
    scheduleId  Int
    room        String?
    attendances Attendance[]
}

model Schedule {
    id      Int      @id @default(autoincrement())
    date    DateTime @unique
    lessons Lesson[]
}

model Attendance {
    id        Int      @id @default(autoincrement())
    user      users    @relation(fields: [userID], references: [id])
    userID    Int
    lesson    Lesson   @relation(fields: [lessonId], references: [id])
    lessonId  Int
    present   Boolean  @default(false)
    timestamp DateTime @default(now())

    @@unique([userID, lessonId])
}
